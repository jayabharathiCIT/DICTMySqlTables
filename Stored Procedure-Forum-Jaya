1.Stored Procedure to add new post into dt_posts  table. 


CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_AddPost`(
  `P_Topic_Title` VARCHAR(80),
  `P_Description_Post` VARCHAR(200),
  `P_Category_ID` INT,
  `P_Date_Posted` DATETIME(6),
  `P_Register_ID` INT
)
BEGIN
INSERT into `dict website`.`dt_posts`(Post_ID,Topic_Title,Description_Post,Category_ID,Date_Posted,Register_ID)
 values (P_Post_ID,P_Topic_Title,P_Description_Post,P_Category_ID,P_Date_Posted,P_Register_ID);	END
 
 2. View all posts stored procedure
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_PostViewAll`()
BEGIN
	SELECT * FROM `dict website`.dt_posts;
END

3. Stored procedure “sp_FristNameByID”
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_FristNameByID`(
`registerID` INT
)
BEGIN	
DECLARE personRole varchar(15);

    IF EXISTS (select `First_Name` from `dict website`.dt_dict_persons where Register_ID=registerID)
    then
    set personRole ='Student';
    select `First_Name` , personRole AS Roles from `dict website`.dt_dict_persons where Register_ID=registerID;
    else
    set personRole ='Admin';
     select `First_Name` , personRole AS Roles from `dict website`.dt_dict_admin where Register_ID=registerID;
	END IF;
END

4. Create reply table
CREATE TABLE ` dt_reply` (
  `Reply_ID` int(11) NOT NULL AUTO_INCREMENT,
  `Post_ID` int(11) NOT NULL,
  `Register_ID` int(11) NOT NULL,
  `Rpy_Comment` mediumtext NOT NULL,
  `Reply_Date` datetime(6) NOT NULL,
  PRIMARY KEY (`Reply_ID`),
  KEY `Post_ID_idx` (`Post_ID`),
  KEY `Register_reply_idx` (`Register_ID`),
  CONSTRAINT `Post_ID` FOREIGN KEY (`Post_ID`) REFERENCES `dt_posts` (`Post_ID`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `Register_reply` FOREIGN KEY (`Register_ID`) REFERENCES `dt_dict_persons` (`Register_ID`) ON DELETE NO ACTION ON UPDATE NO ACTION
)

5.Stored procedure sp_AddReply

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_AddReply`(
  `R_Post_ID` INT,
  `R_Register_ID` INT,
  `R_Rply_Comment` MEDIUMTEXT,
  `R_Reply_Date` DateTime(6)
)
BEGIN
			INSERT into `dict website`.`dt_reply`(Post_ID,Register_ID,Rpy_Comment,Reply_Date)
            values (R_Post_ID,R_Register_ID,R_Rply_Comment,R_Reply_Date);		
END


6.Stored procedure sp_CheckAuthUser

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckAuthUser`(
`F_Register_ID` INT,
`F_Password` INT
)
BEGIN
DECLARE AucthPersonCount INT;
SELECT COUNT(*) INTO AucthPersonCount  from `dict website`.dt_dict_persons where Register_ID=F_Register_ID and Password=F_Password;
IF (AucthPersonCount > 0)
Then
     select count(*) from `dict website`.dt_dict_persons where Register_ID=F_Register_ID and Password=F_Password;
ELSE 
  select count(*) from `dict website`.dt_dict_admin where Register_ID=F_Register_ID and Password=F_Password;
END IF;
END


7.Stored procedure sp_CountReplies

CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CountReplies`(
  `R_Post_ID` INT
)
BEGIN
UPDATE `dict website`.`dt_posts` set No_Replies = (SELECT COUNT(*) FROM `dict website`.`dt_reply` WHERE Post_ID =R_Post_ID)  Where Post_ID = R_Post_ID;
END


8.Stored Procedure sp_WhoCreatedPost
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_WhoCreatedPost`(
`P_Register_ID` INT,
`P_Post_ID` INT)
BEGIN
select  count(*) from `dict website`.dt_posts where Register_ID=P_Register_ID and Post_ID=P_Post_ID;
END

9.Stored Procedure sp_EditPost
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_EditPost`(
 `P_Topic_Title` VARCHAR(80),
  `P_Description_Post` VARCHAR(200),
  `P_Category_ID` INT,
  `P_Date_Posted` DATETIME(6),
  `P_Post_ID` INT
  )
BEGIN
UPDATE `dict website`.`dt_posts` SET `Topic_Title` = P_Topic_Title, `Description_Post` = P_Description_Post ,  `Category_ID` = P_Category_ID , `Date_Posted`=P_Date_Posted  where `Post_ID` = P_Post_ID;
END

10.Stored Procedure sp_Register
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_Register`(
  `P_Register_ID` int(11),
  `P_First_Name` VARCHAR(20),
  `P_Last_Name` VARCHAR(20),
  `P_Password` INT(10),
  `P_Date_of_Birth` DATE,
  `P_Email` VARCHAR(80),
  `P_Date_Change_Password` DATETIME(6)
)
BEGIN
INSERT into `dict website`.`dt_dict_persons`(Register_ID,First_Name,Last_Name,Password,Date_of_Birth,Email,Date_Change_Password)
 values (P_Register_ID,P_First_Name,P_Last_Name,P_Password,P_Date_of_Birth,P_Email,P_Date_Change_Password);	END


11. Stored Procedure sp_CheckPassword
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_CheckPassword`(
  `P_Register_ID` int(11),
  `P_Password` INT(10)
)
BEGIN
select Register_ID ,Password from `dict website`.dt_dict_persons where Register_ID = P_Register_ID and Password = P_Password;
 END
 
 12. Stored Procedure sp_PasswordChange
 CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_PasswordChange`(
  `P_Register_ID` int(11),
  `P_Password` INT(10),
  `P_Date_Change_Password` DATETIME(6)
)
BEGIN
update  `dict website`.`dt_dict_persons` set Password = P_Password, Date_Change_Password = P_Date_Change_Password where Register_ID = P_Register_ID;		
END

13. Stored Procedure sp_ForgetPassword
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_ForgetPassword`(
  `P_Register_ID` int(11),
  `P_Email` INT(10)
)
BEGIN
select Register_ID ,Email from `dict website`.dt_dict_persons where Register_ID = P_Register_ID and Email = P_Email;
 END

14. Stored Procedure sp_StatusForgetPassword
CREATE DEFINER=`root`@`localhost` PROCEDURE `sp_StatusForgetPassword`(
  `P_Register_ID` int(11),
  `P_Email` VARCHAR(80),
  `P_ForgetPassword` char(4)
)
BEGIN
update`dict website`.`dt_dict_persons`
set ForgetPassword = P_ForgetPassword
where Register_ID = P_Register_ID and Email = P_Email;	
END
